export default class DOMPatch {
    constructor(view: any, container: any, id: any, html: any, streams: any, targetCID: any, opts?: {});
    view: any;
    liveSocket: any;
    container: any;
    id: any;
    rootID: any;
    html: any;
    streams: any;
    streamInserts: {};
    streamComponentRestore: {};
    targetCID: any;
    cidPatch: boolean;
    pendingRemoves: any[];
    phxRemove: any;
    targetContainer: any;
    callbacks: {
        beforeadded: any[];
        beforeupdated: any[];
        beforephxChildAdded: any[];
        afteradded: any[];
        afterupdated: any[];
        afterdiscarded: any[];
        afterphxChildAdded: any[];
        aftertransitionsDiscarded: any[];
    };
    withChildren: any;
    undoRef: any;
    before(kind: any, callback: any): void;
    after(kind: any, callback: any): void;
    trackBefore(kind: any, ...args: any[]): void;
    trackAfter(kind: any, ...args: any[]): void;
    markPrunableContentForRemoval(): void;
    perform(isJoinPatch: any): boolean;
    onNodeDiscarded(el: any): void;
    maybePendingRemove(node: any): boolean;
    removeStreamChildElement(child: any, force?: boolean): void;
    getStreamInsert(el: any): any;
    setStreamRef(el: any, ref: any): void;
    maybeReOrderStream(el: any, isNew: any): void;
    maybeLimitStream(el: any): void;
    transitionPendingRemoves(): void;
    isChangedSelect(fromEl: any, toEl: any): boolean;
    isCIDPatch(): boolean;
    skipCIDSibling(el: any): any;
    targetCIDContainer(html: any): any;
    indexOf(parent: any, child: any): number;
    handleRuntimeHook(el: any, source: any): void;
}
